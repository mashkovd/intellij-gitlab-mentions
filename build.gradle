plugins {
    id 'java'
    id 'org.jetbrains.intellij.platform' version '2.9.0'
}

group = 'com.fxclub'
version = '1.7.0'

repositories {
    mavenCentral()
    // Repositories required by the IntelliJ Platform Gradle Plugin v2
    intellijPlatform.defaultRepositories()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

patchPluginXml {
    sinceBuild = '243'    // 2024.3.*
    untilBuild = '253.*'  // valid multi-part format with wildcard for the branch
    changeNotes = "Initial GitLab user mention completion"
}

// Disable generation of searchable options-related tasks to prevent headless failures
tasks.matching { it.name in ['buildSearchableOptions', 'prepareJarSearchableOptions', 'jarSearchableOptions'] }.configureEach {
    enabled = false
}

dependencies {
    intellijPlatform {
        // Use the same IDE version for buildPlugin and runIde
        intellijIdeaCommunity('2024.3.6')
        // Add required bundled/external plugins
        bundledPlugins 'com.intellij.java', 'org.intellij.plugins.markdown'
    }

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'

    // Lombok for builders and boilerplate reduction
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    // SLF4J API for Lombok @Slf4j (provided at runtime by IDE)
    compileOnly 'org.slf4j:slf4j-api:2.0.13'
    testCompileOnly 'org.slf4j:slf4j-api:2.0.13'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// Allow signing with environment variables, or fall back to local files if env vars are not set
signPlugin {
    // Prefer env variables (recommended for CI)
    def certEnv = providers.environmentVariable("CERTIFICATE_CHAIN")
    def keyEnv = providers.environmentVariable("PRIVATE_KEY")
    def passEnv = providers.environmentVariable("PRIVATE_KEY_PASSWORD")

    // Fallback to files in project root when env vars are missing
    def certFile = providers.fileContents(layout.projectDirectory.file("chain.crt")).asText
    def keyFile = providers.fileContents(layout.projectDirectory.file("private.pem")).asText

    certificateChain = certEnv.orElse(certFile)
    privateKey = keyEnv.orElse(keyFile)
    password = passEnv // may be empty if using an unencrypted key
}

publishPlugin {
    token = providers.environmentVariable("PUBLISH_TOKEN")
    channels = ['beta']
}
